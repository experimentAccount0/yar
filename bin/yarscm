#!/usr/bin/env python
"""A very simple utility which builds on the capbilities of
Radon (https://pypi.python.org/pypi/radon) to compute some
yar source code metrics. The purpose of these metrics is to
provide a high level sense of the size of yar."""

import fnmatch
import os
import sys

import radon.raw

if __name__ == "__main__":

    number_source_files = 0
    number_lines_of_code = 0
    number_logical_lines_of_code = 0

    if 1 < len(sys.argv):
        root_dirs = [os.path.abspath(x) for x in sys.argv[1:]]
    else:
        root_dirs = [os.path.join(
            os.path.split(sys.argv[0])[0],
            "../yar")]

    for root_dir in root_dirs:
        for root, dirnames, filenames in os.walk(root_dir):
            if not root.endswith("tests"):
                for filename in fnmatch.filter(filenames, "*.py"):
                    if filename != "__init__.py":
                        source_file_name = os.path.join(root, filename)
                        with open(source_file_name, 'r') as f:
                            source_code = f.read()
                            scm = radon.raw.analyze(source_code)
                            number_source_files += 1
                            number_lines_of_code += scm.loc
                            number_logical_lines_of_code += scm.lloc

    print "source directories:"
    for root_dir in root_dirs:
        print "-- %s" % root_dir
    print "number source files = %d" % number_source_files
    print "number lines of code = %d" % number_lines_of_code
    print "number logical lines of code = %d" % number_logical_lines_of_code
