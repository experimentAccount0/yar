#!/usr/bin/env python
"""This module contains the core logic for the auth service."""

import logging
import time

import tornado.httpserver
import tornado.web

from yar.auth_service import async_app_service_forwarder
from yar.auth_service.basic import async_creds_retriever
from yar.auth_service.mac import async_mac_creds_retriever
from yar.auth_service.mac import async_mac_auth
from yar.auth_service.mac import async_nonce_checker
from yar.auth_service import auth_service_request_handler
from yar.auth_service import clparser
from yar.util import logging_config
from yar.util import tsh

_logger = logging.getLogger("AUTHSERVER.%s" % __name__)


if __name__ == "__main__":
    clp = clparser.CommandLineParser()
    (clo, cla) = clp.parse_args()

    logging_config.configure(
        clo.logging_level,
        clo.logging_file,
        clo.syslog)

    tsh.install()

    fmt = (
        "Auth Service listening on {clo.listen_on} "
        "using Nonce Store {clo.nonce_store}, "
        "Key Service '{clo.key_service}' "
        "and App Service '{clo.app_service}'"
    )
    _logger.info(fmt.format(clo=clo))

    async_creds_retriever.key_service_address = clo.key_service
    async_mac_creds_retriever.key_service_address = clo.key_service
    async_mac_auth.maxage = clo.maxage
    async_nonce_checker.nonce_store = clo.nonce_store
    async_app_service_forwarder.app_service = clo.app_service
    async_app_service_forwarder.auth_method = clo.app_service_auth_method

    handlers = [
        (
            auth_service_request_handler.url_spec,
            auth_service_request_handler.RequestHandler
        ),
    ]
    app = tornado.web.Application(handlers=handlers)

    http_server = tornado.httpserver.HTTPServer(app)
    http_server.listen(
        port=clo.listen_on[1],
        address=clo.listen_on[0])

    tornado.ioloop.IOLoop.instance().start()
