#!/usr/bin/env python
"""This module contains a super simple app service
to be used for testing."""

import datetime
import httplib
import logging
import os
import sys
import time
import uuid

import tornado.httpserver
import tornado.httpclient
import tornado.ioloop
import tornado.web

from yar.app_service.clparser import CommandLineParser
from yar.util import tsh
from yar.util import logging_config

_logger = logging.getLogger("APPSERVICE.%s" % __name__)


class RequestHandler(tornado.web.RequestHandler):

    def _gen_body(self):
        auth_hdr_value = self.request.headers.get(
            "Authorization",
            "<no auth header>")
        rv = {
            "status": "ok",
            "when": str(datetime.datetime.now()),
            "auth": auth_hdr_value,
        }
        return rv

    def get(self):
        self.write(self._gen_body())
        self.set_status(httplib.OK)

    def head(self):
        self.write("")
        self.set_status(httplib.OK)

    def delete(self):
        self.write("")
        self.set_status(httplib.OK)

    def options(self):
        self.set_header("Allow", "GET,POST,PUT,HEAD,DELETE,OPTIONS")
        self.write("")
        self.set_status(httplib.OK)

    def post(self):
        location_url = "%s/%s" % (
            self.request.full_url(),
            str(uuid.uuid4()).replace("-", ""))
        self.set_header("Location", location_url)
        self.set_status(httplib.CREATED)

    def put(self):
        self.set_status(httplib.OK)

    def patch(self):
        self.set_status(httplib.OK)

    def set_default_headers(self):
        self.clear_header("Server")


if __name__ == "__main__":
    clp = CommandLineParser()
    (clo, cla) = clp.parse_args()

    logging_config.configure(
        clo.logging_level,
        clo.logging_file,
        clo.syslog)

    tsh.install()

    _logger.info(
        "%s listening on %s",
        os.path.basename(os.path.split(sys.argv[0])[1]),
        clo.listen_on)

    app = tornado.web.Application(handlers=[(r".*", RequestHandler)])

    http_server = tornado.httpserver.HTTPServer(app)
    http_server.listen(
        port=clo.listen_on[1],
        address=clo.listen_on[0])

    tornado.ioloop.IOLoop.instance().start()
