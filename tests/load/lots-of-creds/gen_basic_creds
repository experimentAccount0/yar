#!/usr/bin/env python
"""What's the real problem this script is trying to solve?
Was trying to:

1/ explore how database size grows as a function of number
of sets of credentials
2/ run load tests with key stores containing a reasonable
data shape
3/ explore how credential retrieval time is affected by
the number of sets of credentials

The problem was that generating credentials and loading up
databases with lots of credentials takes a while. So the
solution was to pre-generate a whole bunch of credentials
and save them in files that could be uploaded to CouchDB
using CouchDB's bulk document upload capability.

Why 25,000 credentials in most of the JSON files? Why
not just put all credentials in a single JSON file?
Found that really large JSON files took a very long
time to upload and smaller files were much faster.
After some adhoc testing 25,000 seemed to be the a
good balance between file size and time to upload. No
real magic here just fiddled with it a bit.

Why 1K, 10K and then a bunch with 25K? Wanted to graph
the growth of the database as a function of the number
of sets of credentials.

Files are generated in in same directory as this script."""

import os
import sys
import uuid

import yar.util.basic

def create_file(number_of_creds, filename):

    # :TODO: what about MAC creds?

    with open(filename, "w") as f:
        f.write('{"docs": [\n')
        fmt = (
            '{"_id": "%s", '
            '"principal": "%s@example.com", '
            '"type": "creds_v1.0", '
            '"is_deleted": false, '
            '"basic": {'
            '"api_key": "%s"'
            '}'
            '}%s\n'
        )
        for i in range(0, number_of_creds):
            api_key = yar.util.basic.APIKey.generate()
            principal = str(uuid.uuid4()).replace("-", "")
            comma_or_nothing = "" if i == (number_of_creds - 1) else ","
            f.write(fmt % (api_key, principal, api_key, comma_or_nothing))
        f.write(']}\n')


if __name__ == "__main__":

    abs_base_path = os.path.abspath(os.path.split(sys.argv[0])[0])

    number_of_creds = [1000, 10000, 25000 - (1000 + 10000)]
    number_of_creds.extend([25000]*((1000000-25000)/25000))
    for i in range(0, len(number_of_creds)):
        filename = "%s.json" % (('0'*10 + str(i))[-4:])
        filename = os.path.join(abs_base_path, filename)
        print "Creating '%s' with %d credentials" % (filename, number_of_creds[i])
        create_file(number_of_creds[i], filename)
