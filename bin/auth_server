#!/usr/bin/env python
"""This module contains the core logic for the authenication server.
The server uses implements MAC Access Authentication."""

import logging
import time

import tornado.httpserver
import tornado.web

from yar.util import tsh

from yar.auth_server import async_app_server_forwarder
from yar.auth_server.basic import async_creds_retriever
from yar.auth_server.hmac import async_hmac_creds_retriever
from yar.auth_server.hmac import async_hmac_auth
from yar.auth_server.hmac import async_nonce_checker
from yar.auth_server import auth_server_request_handler
from yar.auth_server import clparser

_logger = logging.getLogger("AUTHSERVER.%s" % __name__)


if __name__ == "__main__":
    clp = clparser.CommandLineParser()
    (clo, cla) = clp.parse_args()

    logging.Formatter.converter = time.gmtime
    format = (
        "%(asctime)s;%(levelname)s;%(name)s."
        "%(funcName)s:%(lineno)d;%(message)s"
    )
    logging.basicConfig(
        level=clo.logging_level,
        format=format,
        filename=clo.logging_file)

    if clo.syslog:
        handler = logging.handlers.SysLogHandler(address=clo.syslog)
        logging.getLogger().addHandler(handler)

    tsh.install()

    fmt = (
        "Auth Server listening on {clo.listen_on} "
        "using Nonce Store {clo.nonce_store}, "
        "Key Server '{clo.key_server}' "
        "and App Server '{clo.app_server}'"
    )
    _logger.info(fmt.format(clo=clo))

    async_creds_retriever.key_server_address = clo.key_server
    async_hmac_creds_retriever.key_server_address = clo.key_server
    async_hmac_auth.maxage = clo.maxage
    async_nonce_checker.nonce_store = clo.nonce_store
    async_app_server_forwarder.app_server = clo.app_server
    async_app_server_forwarder.auth_method = clo.app_server_auth_method

    handlers = [
        (
            auth_server_request_handler.url_spec,
            auth_server_request_handler.RequestHandler
        ),
    ]
    app = tornado.web.Application(handlers=handlers)

    http_server = tornado.httpserver.HTTPServer(app)
    for address_and_port in clo.listen_on:
        http_server.listen(
            port=address_and_port[1],
            address=address_and_port[0])

    tornado.ioloop.IOLoop.instance().start()
