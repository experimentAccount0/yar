#!/usr/bin/env bash
#
# when running load tests the key store should be loaded with
# a bunch of credentials so its data shape is representive of
# a real production scenario
#
# it takes a long time to load lots of creds into a CouchDB database
# so generating creds and loading them into CouchDB while running
# load tests isn't desirable. instead, this script can be run
# outside of the load test to generate .couch files for CouchDB
# databases containing various numbers of credentails. armed
# with the .couch files it's quick to start a key store against
# the .couch file in effect almost instantly creating a key
# store with lots of credentials.
#
# Why 25,000 credentials as the default # of credentials to generate?
# Found that really large JSON files took a very long
# time to upload and smaller files were much faster.
# After some adhoc testing 25,000 seemed to be the a
# good balance between file size and time to upload. No
# real magic here just fiddled with it a bit.
# 

SCRIPT_DIR_NAME="$( cd "$( dirname "$0" )" && pwd )"
source $SCRIPT_DIR_NAME/../util.sh

#
# parse command line arguments
#
usage() {
    echo "usage: `basename $0` [--couch <couch file size>] [--creds <creds batch size>] [--pbc <% basic creds>]"
}

COUCH_BATCH_SIZE=50000
CREDS_BATCH_SIZE=25000
PERCENT_BASIC_CREDS=90

while [[ 0 -ne $# ]]
do
    KEY="$1"
    shift
    case $KEY in
        --couch)
            COUCH_BATCH_SIZE=${1:-}
            shift
            ;;
        --creds)
            CREDS_BATCH_SIZE=${1:-}
            shift
            ;;
        --pbc)
            PERCENT_BASIC_CREDS=${1:-}
            shift
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

if [ $# != 0 ]; then
    usage
    exit 1
fi

#
# Useful for debugging
#
echo_if_not_silent "Key Parameters" "yellow"
echo "-- CREDS_BATCH_SIZE = $CREDS_BATCH_SIZE"
echo "-- COUCH_BATCH_SIZE = $COUCH_BATCH_SIZE"
echo "-- PERCENT_BASIC_CREDS = $PERCENT_BASIC_CREDS%"

#
# some initialization before we start the meat of this script
#
DATA_DIRECTORY=$SCRIPT_DIR_NAME/temp_couchdb
rm -rf $DATA_DIRECTORY >& /dev/null
rm -f $SCRIPT_DIR_NAME/*.creds.couch

yar_init_deployment "$DATA_DIRECTORY" "yellow"

#
# create a key store in an isolated container
#
echo_if_not_silent "Creating Key Store" "yellow"
if ! KEY_STORE=$(create_key_store "" "" false); then
    echo "Failed to create key store"
    exit 1
fi
echo "-- Key Store available @ 'http://$KEY_STORE'"
echo "-- Key Store data saved in '$DATA_DIRECTORY'"

#
# iterate over each of the json files containing previously
# generated credentials taking a copy of the key store after
# each millionth upload and save the copy to the same
# directory as this script
#
echo_if_not_silent "Creating Couch Files" "yellow"
TOTAL_NUMBER_OF_CREDS=0
while true
do
    echo "-- Creating & Uploading $CREDS_BATCH_SIZE creds"

    CREDS=$(platform_safe_mktemp $CREDS_BATCH_SIZE)

    sudo docker run yar_img bulk_gen_creds $CREDS_BATCH_SIZE $PERCENT_BASIC_CREDS > "$CREDS"

    STATUS_CODE=$(curl \
        -s \
        -o /dev/null \
        --write-out '%{http_code}' \
        -X POST \
        -H "Content-Type: application/json; charset=utf8" \
        -d @$CREDS \
        http://$KEY_STORE/_bulk_docs)
    if [ $? -ne 0 ] || [ "$STATUS_CODE" != "201" ]; then
        echo "-- Failed to upload '$CREDS' to key store @ '$KEY_STORE'"
        exit 2
    fi

    let "TOTAL_NUMBER_OF_CREDS += $CREDS_BATCH_SIZE"
    if [ $(($TOTAL_NUMBER_OF_CREDS % $COUCH_BATCH_SIZE)) == 0 ];then
        #
        # local.ini for CouchDB should have been configured with
        #
        # [couchdb]
        # delayed_commits = false
        #
        # but in case not, we'll issue the request below to force
        # a flush to disk
        #
        STATUS_CODE=$(curl \
            -s \
            -o /dev/null \
            --write-out '%{http_code}' \
            -X POST \
            -H "Content-Type: application/json; charset=utf8" \
            http://$KEY_STORE/_ensure_full_commit)
        if [ $? -ne 0 ] || [ "$STATUS_CODE" != "201" ]; then
            echo "-- Flush to disk failed on key store '$KEY_STORE'"
            exit 2
        fi

        DEST=$SCRIPT_DIR_NAME/$TOTAL_NUMBER_OF_CREDS.$PERCENT_BASIC_CREDS.creds.couch
        echo_if_not_silent "-- Creating '$DEST'" "bold yellow"
        cp $DATA_DIRECTORY/Key-Store/data/creds.couch $DEST
    fi

done

exit 0
