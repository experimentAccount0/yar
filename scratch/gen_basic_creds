#!/usr/bin/env python

import httplib
import httplib2
import json
import subprocess
import uuid

import yar.util.basic

def create_database():

    database = "das"+str(uuid.uuid4()).replace("-", "")

    exit_code = subprocess.call([
        "key_store_installer",
        "--database=%s" % database,
        "--create=True",
        "--delete=False",
    ])
    if 0 != exit_code:
        return None

    return database

def delete_database(database):
    http_client = httplib2.Http()
    response, content = http_client.request(
        "http://127.0.0.1:5984/%s" % database,
        "DELETE")
    return httplib.OK == response.status

def create_basic_creds(principal):
    api_key = yar.util.basic.APIKey.generate()
    rv = {
        "_id": api_key,
        "principal": principal,
        "type": "creds_v1.0",
        "is_deleted": False,
        "basic": {
            "api_key": api_key,
        },
    }
    return rv


def create_lots_of_creds(database, principal, number_of_creds):

    body = {
        "docs": [create_basic_creds(principal) for i in range(0, number_of_creds)],
    }

    http_client = httplib2.Http()

    body_as_json = json.dumps(body)
    headers = {
        "Content-type": "application/json; charset=utf8",
        "Content-length": str(len(body_as_json)),
    }
    response, content = http_client.request(
        "http://127.0.0.1:5984/%s/_bulk_docs" % database,
        "POST",
        body=body_as_json,
        headers=headers)
    if httplib.CREATED != response.status:
        pass

    body_as_json = json.dumps(body)
    headers = {
        "Content-type": "application/json; charset=utf8",
        "Content-length": str(len(body_as_json)),
    }
    response, content = http_client.request(
        "http://127.0.0.1:5984/%s" % database,
        "GET")
    if httplib.OK != response.status:
        pass

    content = json.loads(content)
    return (content["doc_count"], content["data_size"], content["disk_size"])

if __name__ == "__main__":
    database = create_database()

    principal = "dave@example.com"

    number_of_creds_to_add = [
        10000,
        90000,
        100000,
        100000,
        100000,
        100000,
        100000,
        100000,
        100000,
        100000,
        100000,
    ]
    for number_of_creds in number_of_creds_to_add:
        (number_creds, data_size_in_bytes, disk_size_in_bytes) = create_lots_of_creds(
            database,
            principal,
            number_of_creds)
        print "%s\t%s\t%s" % (
            number_creds,
            int(data_size_in_bytes / (1024 * 1024)),
            int(disk_size_in_bytes / (1024 * 1024)))

    delete_database(database)
